x_grid = np.array([-1, 0, 1])
y_grid = np.array([-1, 0, 1])
X, Y = np.meshgrid(x_grid, y_grid)

X = [[-1,  0,  1],    Y = [[-1, -1, -1],
     [-1,  0,  1],        [ 0,  0,  0],
     [-1,  0,  1]]        [ 1,  1,  1]]
Each row in X contains the same x-coordinates.
Each column in Y contains the same y-coordinates.
This allows us to evaluate the function on a grid.

Breaking Down the Code

Z = np.array([f(np.array([x, y])) for x, y in zip(X.ravel(), Y.ravel())]).reshape(X.shape)
1.Flatten X and Y into 1D arrays using .ravel()

X.ravel()  # [x1, x2, ..., xn]
Y.ravel()  # [y1, y2, ..., yn]
This allows us to iterate over each (x, y) point in the grid.

2.Evaluate the function f(x, y) for each (x, y) pair:

[f(np.array([x, y])) for x, y in zip(X.ravel(), Y.ravel())]

Calls f(x, y) at each grid point.
Stores the function values in a 1D NumPy array.

3.Reshape the function values into the original 2D grid shape:

Z.reshape(X.shape)
Converts the 1D function values back into a 2D array (Z).
Z[i, j] now represents the function value at grid point (i, j).

Example of Z Calculation
Suppose we have:
𝑓(𝑥,𝑦)=𝑥^2+𝑦^2
  (a simple quadratic function)
The grid:

X = [[-1, 0, 1],    Y = [[-1, -1, -1],
     [-1, 0, 1],        [ 0,  0,  0],
     [-1, 0, 1]]        [ 1,  1,  1]]
Evaluating 𝑓(𝑥,𝑦)
f(x,y) at each grid point:

Z = [[2, 1, 2],
     [1, 0, 1],
     [2, 1, 2]]
This Z is now ready for contour plotting.

Plots arrows (blue) showing the descent direction:
Each arrow starts at x_hist[i] and points to x_hist[i+1].
scale_units='xy', scale=1 → Keeps the arrows correctly scaled.
width=0.003 → Sets the arrow width.